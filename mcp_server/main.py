# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:02:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    Address,
    ApiStorageProfileSystemProfilesPostResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdGetResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdPatchRequest,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdPatchResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdUnmaskGetResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdVersionsAddressVersionIdGetResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdVersionsAddressVersionIdUnmaskGetResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesGetResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesPostResponse,
    ApiStorageProfileSystemProfilesProfileIdAddressesUnmaskGetResponse,
    ApiStorageProfileSystemProfilesProfileIdGetResponse,
    ApiStorageProfileSystemProfilesProfileIdPatchRequest,
    ApiStorageProfileSystemProfilesProfileIdPatchResponse,
    ApiStorageProfileSystemProfilesProfileIdPurchaseInfoGetResponse,
    ApiStorageProfileSystemProfilesProfileIdPurchaseInfoPatchResponse,
    ApiStorageProfileSystemProfilesProfileIdPurchaseInfoPostResponse,
    ApiStorageProfileSystemProfilesProfileIdPurchaseInfoUnmaskGetResponse,
    ApiStorageProfileSystemProfilesProfileIdUnmaskGetResponse,
    ApiStorageProfileSystemProfilesProfileIdVersionsProfileVersionIdGetResponse,
    ApiStorageProfileSystemProfilesProfileIdVersionsProfileVersionIdUnmaskGetResponse,
    ApiStorageProfileSystemProfilesSchemaPutResponse,
    ApiStorageProfileSystemProspectsPostResponse,
    ApiStorageProfileSystemProspectsProspectIdGetResponse,
    ApiStorageProfileSystemProspectsProspectIdPatchResponse,
    ApiStorageProfileSystemProspectsProspectIdUnmaskGetResponse,
    Profile,
    Prospect,
    Schema,
)

app = MCPProxy(
    contact={},
    description='Create shopper profiles and manage their information.',
    title='Profile System',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.post(
    '/api/storage/profile-system/profiles',
    description=""" Creates new client profile.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> The `id` field returned by this request is the `profileId` used to retrieve information on a specific profile later.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_client_profile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    ttl: Optional[int] = None,
    body: Profile = None,
):
    """
    Create client profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/storage/profile-system/profiles/schema',
    description=""" Creates or updates profile schema.


> Each account has one profile schema. Updating it with this request will substitute the previous version.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_or_update_profile_schema(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: Schema = None,
):
    """
    Create or update profile schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/storage/profile-system/profiles/{profileId}',
    description=""" Deletes a client profile by `profileId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_client_profile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
):
    """
    Delete client profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}',
    description=""" Retrieves the information of a specific client, by its `profileId`.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_profile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/storage/profile-system/profiles/{profileId}',
    description=""" Updates one or more fields of an existing client profile.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_client_profile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
    ttl: Optional[int] = None,
    body: ApiStorageProfileSystemProfilesProfileIdPatchRequest = None,
):
    """
    Updates client profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses',
    description=""" Retrieves information of all addresses of a given client, by its `profileId`.


> For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked client addresses.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_client_addresses(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get client addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/storage/profile-system/profiles/{profileId}/addresses',
    description=""" Creates new address for a given client profile.


> The `id` field returned by this request is the `addressId` used to retrieve or update information of a specific address later.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_client_address(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
    body: Address = None,
):
    """
    Create client address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses/unmask',
    description=""" Retrieves unmasked information of all addresses of a given client, by its `profileId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_client_addresses(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get unmasked client addresses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}',
    description=""" Deletes a client's address by `profileId` and `addressId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_address(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Delete address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}',
    description=""" Retrieves information of a specific address of a given client, by its respectives `adderssId` and `profileId`.


> For security and privacy reasons, this request returns masked address data. For unmasked information, see Get unmasked address.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_address(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}',
    description=""" Updates one or more fields of an existing address for a given client profile.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_client_address(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
    body: ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdPatchRequest = None,
):
    """
    Update client address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/unmask',
    description=""" Retrieves unmasked information of a specific address of a given client, by its respectives `adderssId` and `profileId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_address(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    reason: str = ...,
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get unmasked address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}',
    description=""" Retrieves information of a specific version address of a given client.


> For security and privacy reasons, this request returns masked address data by version. For unmasked information, see Get unmasked address by version.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_address_by_version(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    address_version_id: str = Path(..., alias='addressVersionId'),
    reason: str = ...,
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get address by version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/addresses/{addressId}/versions/{addressVersionId}/unmask',
    description=""" Retrieves unmasked information of a specific address version of a given client.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management', 'client_address_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_address_by_version(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    address_id: str = Path(..., alias='addressId'),
    address_version_id: str = Path(..., alias='addressVersionId'),
    reason: str = ...,
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get unmasked address by version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/storage/profile-system/profiles/{profileId}/purchase-info',
    description=""" Deletes purchase informaiton by `profileId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['purchase_history_management', 'client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_purchase_information(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Delete purchase information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/purchase-info',
    description=""" Retrieves purchase information of a given client, by its `profileId`.


> For security and privacy reasons, this request returns masked data. For unmasked information, see Get unmasked purchase information.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['purchase_history_management', 'client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_purchase_information(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get purchase information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/storage/profile-system/profiles/{profileId}/purchase-info',
    description=""" Updates one or more fields of existing purchase information for a given client profile.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['purchase_history_management', 'client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_purchase_information(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
    body: Any = None,
):
    """
    Update purchase information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/storage/profile-system/profiles/{profileId}/purchase-info',
    description=""" Creates purchase information for a given client profile.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['purchase_history_management', 'client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_purchase_information(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
    body: Any = None,
):
    """
    Create purchase information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/purchase-info/unmask',
    description=""" Retrieves unmasked purchase information of a given client, by its `profileId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['purchase_history_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_purchase_information(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
):
    """
    Get unmasked purchase information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/unmask',
    description=""" Retrieves unmasked information of a specific client, by its `profileId`.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_profile(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    reason: str = ...,
    alternative_key: Optional[str] = Query(None, alias='alternativeKey'),
):
    """
    Get unmasked profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}',
    description=""" Retrieves the information of a specific version of a client profile.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> For security and privacy reasons, this request returns masked profile data. For unmasked information, see Get unmasked profile by version.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_profile_by_version(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    profile_version_id: str = Path(..., alias='profileVersionId'),
):
    """
    Get profile by version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/profiles/{profileId}/versions/{profileVersionId}/unmask',
    description=""" Retrieves unmasked information of a specific version of a client profile.


> Since your store's profile schema is customizable, the schema and examples presented below may differ from yours. Your integration must be adapted accordingly.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['client_profile_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_profile_by_version(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    profile_id: str = Path(..., alias='profileId'),
    profile_version_id: str = Path(..., alias='profileVersionId'),
    reason: str = ...,
):
    """
    Get unmasked profile by version
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/storage/profile-system/prospects',
    description=""" Creates new prospect.


> The `id` field returned by this request is the `prospectId` used to retrieve information on a specific prospect later.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['prospect_data_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def create_prospect(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: Prospect = None,
):
    """
    Create prospect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/storage/profile-system/prospects/{prospectId}',
    description=""" Deletes a prospect by `prospectId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['prospect_data_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_prospect(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    prospect_id: str = Path(..., alias='prospectId'),
):
    """
    Delete prospect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/prospects/{prospectId}',
    description=""" Retrieves the information of a specific prospect, by its `prospectId`.


> For security and privacy reasons, this request returns masked prospect data. For unmasked information, see Get unmasked prospect.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['prospect_data_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_prospect(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    prospect_id: str = Path(..., alias='prospectId'),
):
    """
    Get prospect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/storage/profile-system/prospects/{prospectId}',
    description=""" Updates one or more fields of an existing prospect.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['prospect_data_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_prospect(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    prospect_id: str = Path(..., alias='prospectId'),
    body: Any = None,
):
    """
    Update prospect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/storage/profile-system/prospects/{prospectId}/unmask',
    description=""" Retrieves unmasked information of a specific prospect, by its `prospectId`.


> Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints. """,
    tags=['prospect_data_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_unmasked_prospect(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    prospect_id: str = Path(..., alias='prospectId'),
    reason: str = ...,
):
    """
    Get unmasked prospect
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
