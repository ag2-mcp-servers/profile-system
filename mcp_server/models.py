# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:02:57+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Address(BaseModel):
    administrativeAreaLevel1: str = Field(
        ...,
        description='Name of administrative area, such as the state or province.',
        examples=['RJ'],
    )
    countryCode: Optional[str] = Field(
        None, description='Two letter country code.', examples=['BR']
    )
    countryName: str = Field(
        ..., description='Name of the address country.', examples=['Brasil']
    )
    locality: str = Field(
        ...,
        description='Name of address locality, such as the city.',
        examples=['Locality'],
    )
    localityAreaLevel1: str = Field(
        ...,
        description='Name of the address locality area, such as the neighborhood or district.',
        examples=['Locality area'],
    )
    postalCode: str = Field(
        ..., description='Address postal code.', examples=['20200-000']
    )
    route: str = Field(
        ..., description='Address route or street name.', examples=['51']
    )
    streetNumber: str = Field(
        ..., description='Address street number.', examples=['999']
    )


class Profile(BaseModel):
    birthDate: Optional[str] = Field(
        None,
        description="Client's birth date in ISO 8601 format.",
        examples=['1925-11-17'],
    )
    document: str = Field(
        ..., description="Client's document.", examples=['12345678900']
    )
    documentType: str = Field(
        ..., description='Type of document informed in `document`.', examples=['CPF']
    )
    email: str = Field(
        ..., description="Client's email address.", examples=['john.doe@example.com']
    )
    firstName: str = Field(..., description="Client's first name.", examples=['John'])
    lastName: str = Field(..., description="Client's last name.", examples=['Doe'])


class Prospect(RootModel[Any]):
    root: Any


class FieldFieldName(BaseModel):
    items: Optional[Dict[str, Any]] = Field(
        None,
        description='Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.',
        examples=[{'type': 'string'}],
    )
    pii: bool = Field(
        ...,
        description='Indicates whether property is Personal Identifiable Information.',
        examples=[True],
    )
    sensitive: bool = Field(
        ...,
        description='Indicates whether property is sensitive data.',
        examples=[True],
    )
    type: str = Field(..., description='Schema property type.', examples=['string'])


class Properties(BaseModel):
    field_fieldName_: Optional[FieldFieldName] = Field(
        None,
        alias='{fieldName}',
        description='Schema of any given field described in the `properties` field.',
    )


class Schema(BaseModel):
    description: str = Field(
        ...,
        description="Schema's human readable description.",
        examples=['This schema describes a b2c customer profile.'],
    )
    documentTTL: Optional[int] = Field(
        None,
        description='Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.',
        examples=[1825],
    )
    properties: Properties = Field(
        ...,
        description='Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).',
    )
    required: List[str] = Field(
        ...,
        description='Schema required fields.',
        examples=[['firstName', 'lastName', 'email', 'document', 'documentType']],
    )
    title: str = Field(
        ..., description='Schema title.', examples=['Client profile schema']
    )
    type: str = Field(..., description='Schema type.', examples=['object'])
    v_indexed: Optional[List] = Field(
        None, alias='v-indexed', description='', examples=[['email', 'document']]
    )
    v_unique: Optional[List] = Field(
        None, alias='v-unique', description='', examples=[['email', 'document']]
    )
    version: Optional[int] = Field(None, description='Schema version.', examples=[1])


class ApiStorageProfileSystemProfilesPostResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesSchemaPutResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdGetResponse(RootModel[List]):
    root: List


class ApiStorageProfileSystemProfilesProfileIdPatchResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesGetResponse(RootModel[List]):
    root: List


class ApiStorageProfileSystemProfilesProfileIdAddressesPostResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesUnmaskGetResponse(
    RootModel[List[Dict[str, Any]]]
):
    root: List[Dict[str, Any]]


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdGetResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdPatchResponse(
    BaseModel
):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdUnmaskGetResponse(
    BaseModel
):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdVersionsAddressVersionIdGetResponse(
    BaseModel
):
    pass


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdVersionsAddressVersionIdUnmaskGetResponse(
    BaseModel
):
    pass


class ApiStorageProfileSystemProfilesProfileIdPurchaseInfoGetResponse(RootModel[List]):
    root: List


class ApiStorageProfileSystemProfilesProfileIdPurchaseInfoPatchResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdPurchaseInfoPostResponse(BaseModel):
    pass


class ApiStorageProfileSystemProfilesProfileIdPurchaseInfoUnmaskGetResponse(
    RootModel[List[Dict[str, Any]]]
):
    root: List[Dict[str, Any]]


class ApiStorageProfileSystemProfilesProfileIdUnmaskGetResponse(RootModel[List]):
    root: List


class ApiStorageProfileSystemProfilesProfileIdVersionsProfileVersionIdGetResponse(
    RootModel[List]
):
    root: List


class ApiStorageProfileSystemProfilesProfileIdVersionsProfileVersionIdUnmaskGetResponse(
    RootModel[List]
):
    root: List


class ApiStorageProfileSystemProspectsPostResponse(BaseModel):
    pass


class ApiStorageProfileSystemProspectsProspectIdGetResponse(RootModel[List]):
    root: List


class ApiStorageProfileSystemProspectsProspectIdPatchResponse(BaseModel):
    pass


class ApiStorageProfileSystemProspectsProspectIdUnmaskGetResponse(RootModel[List]):
    root: List


class AdministrativeAreaLevel1(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of administrative area, such as the state or province.',
        examples=['RJ'],
    )


class CountryCode(RootModel[str]):
    root: str = Field(..., description='Two letter country code.', examples=['BR'])


class CountryName(RootModel[str]):
    root: str = Field(
        ..., description='Name of the address country.', examples=['Brasil']
    )


class Locality(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of address locality, such as the city.',
        examples=['Locality'],
    )


class LocalityAreaLevel1(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of the address locality area, such as the neighborhood or district.',
        examples=['Locality area'],
    )


class PostalCode(RootModel[str]):
    root: str = Field(..., description='Address postal code.', examples=['20200-000'])


class BirthDate(RootModel[str]):
    root: str = Field(
        ...,
        description="Client's birth date in ISO 8601 format.",
        examples=['1925-11-17'],
    )


class Document(RootModel[str]):
    root: str = Field(..., description="Client's document.", examples=['12345678900'])


class DocumentType(RootModel[str]):
    root: str = Field(
        ..., description='Type of document informed in `document`.', examples=['CPF']
    )


class Email(RootModel[str]):
    root: str = Field(
        ..., description="Client's email address.", examples=['john.doe@example.com']
    )


class FirstName(RootModel[str]):
    root: str = Field(..., description="Client's first name.", examples=['John'])


class LastName(RootModel[str]):
    root: str = Field(..., description="Client's last name.", examples=['Doe'])


class ApiStorageProfileSystemProfilesProfileIdPatchRequest(BaseModel):
    birthDate: Optional[BirthDate] = None
    document: Optional[Document] = None
    documentType: Optional[DocumentType] = None
    email: Optional[Email] = None
    firstName: Optional[FirstName] = None
    lastName: Optional[LastName] = None


class ApiStorageProfileSystemProfilesProfileIdAddressesAddressIdPatchRequest(BaseModel):
    administrativeAreaLevel1: Optional[AdministrativeAreaLevel1] = None
    countryCode: Optional[CountryCode] = None
    countryName: Optional[CountryName] = None
    locality: Optional[Locality] = None
    localityAreaLevel1: Optional[LocalityAreaLevel1] = None
    postalCode: Optional[PostalCode] = None
    route: Optional[CountryName] = None
    streetNumber: Optional[CountryName] = None
